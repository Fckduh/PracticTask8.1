//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticTask8.Ado
{
    using Aspose.BarCode.Generation;
    using BarcodeLib;
    using IronBarCode;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data.Entity;
    using System.Drawing;
    using System.IO;
    using System.Threading;
    using static PracticTask8.MainWindow;

    public partial class Images3 
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public byte[] Barcodes { get; set; }
        public int Num { get; set; }
        public static string imagePath { get; private set; }
        public BarCodeImageFormat ImageType { get; set; }
        public string text { get; set; }
        public BaseEncodeType BarcodeType { get; set; }

        
        public Images3()
        {
            
        }
        BarcodeLib.Barcode b = new BarcodeLib.Barcode();
        public void GenerateBarcode()
        {
            using (BarcodesContext db = new BarcodesContext())
            {
                int a = 1;
                int num = 0;
                int number = 1;
                Random rnd = new Random();
                b.IncludeLabel = true;
                imagePath = num + ".png";
                for(int i2 = 0; i2<20; i2++)
                {
                    images3s.Add(new Images3());
                }
                for (int i = 0; i < 20; i++)//По сути сам генератор баркодов
                {
                    System.Drawing.Image img = b.Encode(BarcodeLib.TYPE.CODE128, Convert.ToString(rnd.Next(1000000, 10000000)), Color.Black, Color.White, 250, 110);
                    img.Save(imagePath);
                    byte[] image_bytes = File.ReadAllBytes(imagePath);
                    images3s[i].Id = a;
                    images3s[i].Barcodes = image_bytes;
                    images3s[i].Num = number;
                    number++;
                    a++;

                }
                    
            }
        }
    }
    public class BarcodesContext : DbContext
    {
        public BarcodesContext() : base("lolEntities") { }
        public DbSet<Images3> DataBaseB { get; set; }
    }
}
